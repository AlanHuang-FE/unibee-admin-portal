import axios from "axios";
import React, { useEffect, useState, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import {
  Space,
  Table,
  Tag,
  Button,
  Form,
  Input,
  Select,
  message,
  Spin,
  Modal,
  Row,
  Col,
  Tabs,
  Radio,
  Divider,
} from "antd";
import type { TabsProps } from "antd";
import {
  getPlanList,
  getSubDetail,
  createPreviewReq,
  updateSubscription,
  terminateSub,
  getCountryList,
  saveProfile,
} from "../requests";
import { ISubscriptionType, IPlan, IProfile, Country } from "../shared.types";
import update from "immutability-helper";
import Plan from "./plan";
import { showAmount } from "../helpers";

const APP_PATH = import.meta.env.BASE_URL;

interface IPreview {
  totalAmount: number;
  prorationDate: number;
  currency: string;
  invoices: {
    amount: number;
    currency: string;
    description: string;
    probation: boolean;
  }[];
}

const Index = () => {
  const navigate = useNavigate();
  const [userProfile, setUserProfile] = useState<IProfile | null>(null);

  const tabItems: TabsProps["items"] = [
    {
      key: "Subscription",
      label: "Subscription",
      children: <SubscriptionTab setUserProfile={setUserProfile} />,
    },
    {
      key: "Account",
      label: "Account",
      children: <UserTab user={userProfile} />,
    },
    {
      key: "Invoices",
      label: "Invoices",
      children: "Content of invoices",
    },
    {
      key: "Payment",
      label: "Payment",
      children: "content of payment",
    },
    /* {
      key: "Timeline",
      label: "Timeline",
      children: "content of timeline",
    },
    {
      key: "Custom",
      label: "Custom",
      children: "content of custom",
    },
    */
  ];
  const onTabChange = (key: string) => {
    console.log(key);
  };
  return (
    <div>
      <Tabs defaultActiveKey="1" items={tabItems} onChange={onTabChange} />
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          marginTop: "64px",
        }}
      >
        <Button onClick={() => navigate(-1)}>Back</Button>
      </div>
    </div>
  );
};

const UserTab = ({ user }: { user: IProfile | null }) => {
  const [form] = Form.useForm();
  const navigate = useNavigate();
  const [countryList, setCountryList] = useState<Country[]>([]);
  const [loading, setLoading] = useState(false);

  const relogin = () =>
    navigate(`${APP_PATH}login`, {
      state: { msg: "session expired, please re-login" },
    });

  const filterOption = (
    input: string,
    option?: { label: string; value: string }
  ) => (option?.label ?? "").toLowerCase().includes(input.toLowerCase());

  /*
  const onSave = async () => {
    console.log("form: ", form.getFieldsValue());
    setLoading(true);
    let saveProfileRes;
    try {
      saveProfileRes = await saveProfile(form.getFieldsValue());
      console.log("save profile res: ", saveProfileRes);
      const code = saveProfileRes.data.code;
      if (code != 0) {
        code == 61 && relogin();
        // TODO: save all statu code in a constant
        throw new Error(saveProfileRes.data.message);
      }
      message.success("saved");
      setUserProfile(saveProfileRes.data.data.User);
      setLoading(false);
    } catch (err) {
      setLoading(false);
      if (err instanceof Error) {
        console.log("profile update err: ", err.message);
        message.error(err.message);
      } else {
        message.error("Unknown error");
      }
      return;
    }
  };
  */

  useEffect(() => {
    // setFirstLoading(true);
    setLoading(true);
    const fetchData = async () => {
      let profileRes, countryListRes;
      try {
        const res = ([countryListRes] = await Promise.all([
          // getProfile(),
          getCountryList(15621),
        ]));
        console.log("profile/country: ", profileRes, "//", countryListRes);
        res.forEach((r) => {
          const code = r.data.code;
          code == 61 && relogin(); // TODO: redesign the relogin component(popped in current page), so users don't have to be taken to /login
          if (code != 0) {
            // TODO: save all the code as ENUM in constant,
            throw new Error(r.data.message);
          }
        });
        setLoading(false);
      } catch (err) {
        setLoading(false);
        if (err instanceof Error) {
          console.log("profile update err: ", err.message);
          // setErrMsg(err.message);
          message.error(err.message);
        } else {
          message.error("Unknown error");
        }
        return;
      }
      // setUserProfile(profileRes.data.data.User);
      setCountryList(
        countryListRes.data.data.vatCountryList.map((c: any) => ({
          code: c.countryCode,
          name: c.countryName,
        }))
      );
    };

    fetchData();
  }, []);

  return (
    user != null && (
      <Form
        form={form}
        labelCol={{ span: 6 }}
        wrapperCol={{ span: 24 }}
        layout="horizontal"
        // disabled={componentDisabled}
        style={{ maxWidth: 600 }}
        initialValues={user}
      >
        <Form.Item label="ID" name="id" hidden>
          <Input disabled />
        </Form.Item>

        <Form.Item label="First name" name="firstName">
          <Input />
        </Form.Item>

        <Form.Item label="Last name" name="lastName">
          <Input />
        </Form.Item>

        <Form.Item label="Email" name="email">
          <Input disabled />
        </Form.Item>

        <Form.Item label="Billing address" name="address">
          <Input />
        </Form.Item>

        <Form.Item label="Country" name="countryCode">
          <Select
            showSearch
            placeholder="Type to search"
            optionFilterProp="children"
            // value={country}
            // onChange={onCountryChange}
            // onSearch={onSearch}
            filterOption={filterOption}
            options={countryList.map((c) => ({
              label: c.name,
              value: c.code,
            }))}
          />
        </Form.Item>

        <Form.Item label="Country Name" name="countryName" hidden>
          <Input />
        </Form.Item>

        <Form.Item label="Company name" name="companyName">
          <Input />
        </Form.Item>

        <Form.Item label="VAT number" name="vATNumber">
          <Input />
        </Form.Item>

        <Form.Item label="Phone number" name="mobile">
          <Input />
        </Form.Item>

        <Form.Item label="Telegram" name="telegram">
          <Input />
        </Form.Item>

        <Form.Item label="WhatsApp" name="whatsAPP">
          <Input />
        </Form.Item>

        <Form.Item label="WeChat" name="weChat">
          <Input />
        </Form.Item>

        <Form.Item label="LinkedIn" name="linkedIn">
          <Input />
        </Form.Item>

        <Form.Item label="Facebook" name="facebook">
          <Input />
        </Form.Item>

        <Form.Item label="TikTok" name="tikTok">
          <Input />
        </Form.Item>

        <Form.Item label="Other social info" name="otherSocialInfo">
          <Input />
        </Form.Item>

        <Form.Item label="Payment methods" name="paymentMethod">
          <Radio.Group>
            <Radio value="creditCard">Credit Card</Radio>
            <Radio value="crypto">Crypto</Radio>
            <Radio value="paypal">Paypal</Radio>
            <Radio value="wireTransfer">Wire Transfer</Radio>
          </Radio.Group>
        </Form.Item>

        {/* <div
          style={{
            display: "flex",
            justifyContent: "center",
            margin: "36px",
          }}
        >
          <Button type="primary" onClick={onSave} disabled={loading}>
            Save
          </Button>
        </div> */}
      </Form>
    )
  );
};

const SubscriptionTab = ({
  setUserProfile,
}: {
  setUserProfile: (user: IProfile) => void;
}) => {
  const [errMsg, setErrMsg] = useState("");
  const navigate = useNavigate();
  const [plans, setPlans] = useState<IPlan[]>([]);
  const [selectedPlan, setSelectedPlan] = useState<null | number>(null); // null: not selected
  const [modalOpen, setModalOpen] = useState(false);
  const [changePlanModal, setChangePlanModal] = useState(false);
  const [preview, setPreview] = useState<IPreview | null>(null);
  const [messageApi, contextHolder] = message.useMessage();
  const [loading, setLoading] = useState(true);
  const [terminateModal, setTerminateModal] = useState(false);
  const [activeSub, setActiveSub] = useState<ISubscriptionType | null>(null); // null: when page is loading, no data is ready yet.

  const relogin = () =>
    navigate(`${APP_PATH}login`, {
      state: { msg: "session expired, please re-login" },
    });

  const onAddonChange = (
    addonId: number,
    quantity: number | null, // null means: don't update this field, keep its original value
    checked: boolean | null // ditto
  ) => {
    const planIdx = plans.findIndex((p) => p.id == selectedPlan);
    if (planIdx == -1) {
      return;
    }
    const addonIdx = plans[planIdx].addons!.findIndex((a) => a.id == addonId);
    if (addonIdx == -1) {
      return;
    }

    let newPlans = plans;
    if (quantity == null) {
      newPlans = update(plans, {
        [planIdx]: {
          addons: { [addonIdx]: { checked: { $set: checked as boolean } } },
        },
      });
    } else if (checked == null) {
      newPlans = update(plans, {
        [planIdx]: {
          addons: { [addonIdx]: { quantity: { $set: quantity as number } } },
        },
      });
    }
    setPlans(newPlans);
  };

  const toggleModal = () => setModalOpen(!modalOpen);
  const openModal = () => {
    const plan = plans.find((p) => p.id == selectedPlan);
    let valid = true;
    if (plan?.addons != null && plan.addons.length > 0) {
      for (let i = 0; i < plan.addons.length; i++) {
        if (plan.addons[i].checked) {
          const q = Number(plan.addons[i].quantity);
          console.log("q: ", q);
          if (!Number.isInteger(q) || q <= 0) {
            valid = false;
            break;
          }
        }
      }
    }
    if (!valid) {
      message.error("Addon quantity must be greater than 0.");
      return;
    }
    toggleModal();
    createPreview();
  };

  const createPreview = async () => {
    setPreview(null); // clear the last preview, otherwise, users might see the old value before the new value return
    const plan = plans.find((p) => p.id == selectedPlan);
    const addons =
      plan != null && plan.addons != null
        ? plan.addons.filter((a) => a.checked)
        : [];
    console.log("active sub addon bfr preview: ", addons);
    let previewRes;
    try {
      previewRes = await createPreviewReq(
        activeSub!.subscriptionId,
        selectedPlan as number,
        addons.map((a) => ({
          quantity: a.quantity as number,
          addonPlanId: a.id,
        }))
      );
      console.log("subscription update preview res: ", previewRes);
      const code = previewRes.data.code;
      code == 61 && relogin();
      if (code != 0) {
        throw new Error(previewRes.data.message);
      }
    } catch (err) {
      setModalOpen(false);
      if (err instanceof Error) {
        console.log("err creating preview: ", err.message);
        message.error(err.message);
      } else {
        message.error("Unknown error");
      }
      return;
    }

    const p: IPreview = {
      totalAmount: previewRes.data.data.totalAmount,
      currency: previewRes.data.data.currency,
      prorationDate: previewRes.data.data.prorationDate,
      invoices: previewRes.data.data.invoice.lines,
    };
    setPreview(p);
  };

  const onConfirm = async () => {
    const plan = plans.find((p) => p.id == selectedPlan);
    const addons =
      plan != null && plan.addons != null
        ? plan.addons.filter((a) => a.checked)
        : [];
    let updateSubRes;
    try {
      updateSubRes = await updateSubscription(
        activeSub?.subscriptionId as string,
        selectedPlan as number,
        addons.map((a) => ({
          quantity: a.quantity as number,
          addonPlanId: a.id,
        })),
        preview?.totalAmount as number,
        preview?.currency as string,
        preview?.prorationDate as number
      );
      console.log("update subscription submit res: ", updateSubRes);
      const code = updateSubRes.data.code;
      code == 61 && relogin();
      if (code != 0) {
        throw new Error(updateSubRes.data.message);
      }
    } catch (err) {
      setModalOpen(false);
      if (err instanceof Error) {
        console.log("err creating preview: ", err.message);
        message.error(err.message);
      } else {
        message.error("Unknown error");
      }
      return;
    }

    if (updateSubRes.data.data.paid) {
      /*
      navigate(`${APP_PATH}profile/subscription`, {
        state: { msg: "Subscription updated" },
      });
      */
      navigate(-1);
      return;
    }
    toggleModal();
    // ??????????????????
    // what if checkout form is opened, you can't ask admin to pay user's subscription fee.
    window.open(updateSubRes.data.data.link, "_blank");
  };

  const onTerminateSub = async () => {
    let terminateRes;
    try {
      terminateRes = await terminateSub(activeSub?.subscriptionId as string);
      console.log("terminate sub res: ", terminateRes);
      const code = terminateRes.data.code;
      code == 61 && relogin();
      if (code != 0) {
        throw new Error(terminateRes.data.message);
      }
    } catch (err) {
      setTerminateModal(false);
      if (err instanceof Error) {
        console.log("err creating preview: ", err.message);
        message.error(err.message);
      } else {
        message.error("Unknown error");
      }
      return;
    }
    navigate(`${APP_PATH}subscription/list`, {
      // receiving route hasn't read this msg yet.
      state: { msg: "Subscription ended on current billing cycle." },
    });
  };

  const onSelectPlanChange = (value: number) => {
    console.log("value change: ", value);
    setSelectedPlan(value);
  };

  useEffect(() => {
    // const subId = location.state && location.state.subscriptionId;
    const pathName = window.location.pathname.split("/");
    const subId = pathName.pop();
    if (subId == null) {
      // TODO: show page not exit, OR invalid subscription
      return;
    }
    const fetchData = async () => {
      let subDetailRes, planListRes;
      try {
        const res = ([subDetailRes, planListRes] = await Promise.all([
          getSubDetail(subId),
          getPlanList(1),
        ]));
        console.log("subDetail/planList: ", subDetailRes, "//", planListRes);
        res.forEach((r) => {
          const code = r.data.code;
          code == 61 && relogin(); // TODO: redesign the relogin component(popped in current page), so users don't have to be taken to /login
          if (code != 0) {
            // TODO: save all the code as ENUM in constant,
            throw new Error(r.data.message);
          }
        });
      } catch (err) {
        if (err instanceof Error) {
          console.log("err: ", err.message);
          message.error(err.message);
        } else {
          message.error("Unknown error");
        }
        return;
      }

      const s: any = subDetailRes.data.data;
      const localActiveSub: ISubscriptionType = { ...s.subscription };
      localActiveSub.addons = s.addons.map((a: any) => ({
        ...a.AddonPlan,
        quantity: a.quantity,
        addonPlanId: a.addonPlan.id,
      }));
      localActiveSub.user = s.user;
      console.log("active sub: ", localActiveSub);

      setSelectedPlan(s.planId.id);
      setUserProfile(s.user);

      let plans: IPlan[] = planListRes.data.data.Plans.map((p: any) => {
        const p2 = p.plan;
        if (p.plan.type == 2) {
          // addon plan
          return null;
        }
        if (
          p.plan.id != 31 &&
          p.plan.id != 37 &&
          p.plan.id != 38 &&
          p.plan.id != 32 &&
          p.plan.id != 41
        ) {
          return null;
        }
        return {
          id: p2.id,
          planName: p2.planName,
          description: p2.description,
          type: p2.type,
          amount: p2.amount,
          currency: p2.currency,
          intervalUnit: p2.intervalUnit,
          intervalCount: p2.intervalCount,
          status: p2.status,
          addons: p.addons,
        };
      });
      plans = plans.filter((p) => p != null);
      const planIdx = plans.findIndex((p) => p.id == s.planId.id);
      // let's say we have planA(which has addonA1, addonA2, addonA3), planB, planC, user has subscribed to planA, and selected addonA1, addonA3
      // I need to find the index of addonA1,3 in planA.addons array,
      // then set their {quantity, checked: true} props on planA.addons, these props value are from subscription.addons array.
      if (planIdx != -1 && plans[planIdx].addons != null) {
        for (let i = 0; i < plans[planIdx].addons!.length; i++) {
          const addonIdx = localActiveSub.addons.findIndex(
            (subAddon) => subAddon.addonPlanId == plans[planIdx].addons![i].id
          );
          if (addonIdx != -1) {
            plans[planIdx].addons![i].checked = true;
            plans[planIdx].addons![i].quantity =
              localActiveSub.addons[addonIdx].quantity;
          }
        }
      }
      setPlans(plans);
      localActiveSub.plan = plans.find((p) => p.id == localActiveSub.planId);
      setActiveSub(localActiveSub);

      setLoading(false);
    };
    fetchData();
  }, []);

  const p = plans.find((p) => p.id == selectedPlan);
  return (
    <>
      <Spin spinning={loading} fullscreen />
      {contextHolder}
      {
        <Modal
          title="Terminate Subscription"
          open={terminateModal}
          onOk={onTerminateSub}
          onCancel={() => setTerminateModal(false)}
        >
          <div>subscription detail here</div>
          <div>
            Are you sure you want to terminate the following subscrition
          </div>
          <div>user info</div>
          <div>subscription info</div>
          <div>start/end</div>
        </Modal>
      }
      {selectedPlan != null && (
        <Modal
          title="Subscription Update Preview"
          open={modalOpen}
          onOk={onConfirm}
          onCancel={toggleModal}
          width={"640px"}
        >
          {preview && (
            <>
              {preview.invoices.map((i, idx) => (
                <Row key={idx} gutter={[16, 16]}>
                  <Col span={6}>{`${showAmount(i.amount, i.currency)}`}</Col>
                  <Col span={18}>{i.description}</Col>
                </Row>
              ))}
              <hr />
              <Row gutter={[16, 16]}>
                <Col span={6}>
                  <span style={{ fontSize: "18px" }}>Total</span>
                </Col>
                <Col span={18}>
                  <span style={{ fontSize: "18px", fontWeight: "bold" }}>
                    {" "}
                    {`${showAmount(preview.totalAmount, preview.currency)}`}
                  </span>
                </Col>
              </Row>
            </>
          )}
        </Modal>
      )}
      {
        <Modal
          title="Change plan"
          open={changePlanModal}
          onOk={() => setChangePlanModal(false)}
          onCancel={() => setChangePlanModal(false)}
        >
          <Divider>Choose a new subscription plan</Divider>
          <div
            style={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              margin: "12px",
            }}
          >
            <Select
              style={{ width: 120 }}
              // placeholder="Type to search"
              // optionFilterProp="children"
              value={selectedPlan}
              onChange={onSelectPlanChange}
              // onSearch={onSearch}
              // filterOption={filterOption}
              options={plans.map((p) => ({
                label: p.planName,
                value: p.id,
              }))}
            />
          </div>

          {p != undefined && (
            <div
              style={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                marginBottom: "48px",
              }}
            >
              <Plan
                plan={p}
                selectedPlan={selectedPlan}
                setSelectedPlan={setSelectedPlan}
                onAddonChange={onAddonChange}
                isActive={p.id == activeSub?.planId}
              />
            </div>
          )}
        </Modal>
      }
      <div>
        <Divider orientation="left">User info</Divider>
        <Row>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}>First name</span>
          </Col>
          <Col span={4}>{activeSub?.user?.firstName}</Col>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}> Lastname</span>
          </Col>
          <Col span={4}>{activeSub?.user?.lastName}</Col>
        </Row>
        <Row>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}>Email</span>
          </Col>
          <Col span={4}>{activeSub?.user?.email}</Col>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}>Phone</span>
          </Col>
          <Col span={4}>{activeSub?.user?.phone}</Col>
        </Row>
        <Row>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}>Country</span>
          </Col>
          <Col span={4}>{activeSub?.user?.countryName}</Col>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}>Billing address</span>
          </Col>
          <Col span={4}>{activeSub?.user?.adress}</Col>
        </Row>
        <Row>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}>Payment method</span>
          </Col>
          <Col span={4}>{activeSub?.user?.paymentMethod}</Col>
          <Col span={3}>
            <span style={{ fontWeight: "bold" }}>VAT number</span>
          </Col>
          <Col span={4}>{activeSub?.user?.vATNumber}</Col>
        </Row>

        {/* <span>billing cycle: from/to: ... </span>
        <Button type="primary" onClick={() => setTerminateModal(true)}>
          Terminate this subscrition at the end of current cycle
        </Button>
        update billing cycle start date
              */}
      </div>
      <Divider orientation="left">Subscription info</Divider>
      <Row>
        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>Plan</span>
        </Col>
        <Col span={4}>{activeSub?.plan?.planName}</Col>
        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>Plan description</span>
        </Col>
        <Col span={4}>{activeSub?.plan?.description}</Col>
      </Row>
      <Row>
        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>Plan price</span>
        </Col>
        <Col span={4}>
          {activeSub?.plan?.amount &&
            showAmount(activeSub?.plan?.amount, activeSub?.plan?.currency)}
        </Col>
        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>Addons</span>
        </Col>
        <Col span={4}>{"*******"}</Col>
      </Row>
      <Row>
        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>Total amount</span>
        </Col>
        <Col span={4}>
          {activeSub?.amount &&
            showAmount(activeSub.amount, activeSub.currency)}
        </Col>

        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>Bill period</span>
        </Col>
        <Col span={4}>{activeSub?.plan?.intervalUnit}</Col>
      </Row>
      <Row>
        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>First pay</span>
        </Col>
        <Col span={4}>{activeSub?.firstPayTime}</Col>
        <Col span={3}>
          <span style={{ fontWeight: "bold" }}>Next due date</span>
        </Col>
        <Col span={4}>
          {activeSub?.currentPeriodEnd &&
            new Date(activeSub?.currentPeriodEnd * 1000).toLocaleDateString()}
        </Col>
      </Row>
      <div style={{ margin: "12px 0" }}>
        <Button onClick={() => setChangePlanModal(true)}>Change plan</Button>
      </div>

      {/* <div style={{ display: "flex", gap: "18px" }}>
        {plans.map((p) => (
          <Plan
            key={p.id}
            plan={p}
            selectedPlan={selectedPlan}
            setSelectedPlan={setSelectedPlan}
            onAddonChange={onAddonChange}
            isActive={p.id == activeSub?.planId}
          />
        ))}
        </div> */}
      <Divider orientation="left">Subscription History</Divider>

      <Divider orientation="left">Addon History</Divider>

      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "68px",
        }}
      >
        {plans.length != 0 && (
          <>
            {/* <Button onClick={() => navigate(-1)}>Go back</Button>
            &nbsp;&nbsp;&nbsp;&nbsp; */}
            <Button
              type="primary"
              onClick={openModal}
              disabled={selectedPlan == null}
            >
              Confirm
            </Button>
          </>
        )}
      </div>
    </>
  );
};

export default Index;
